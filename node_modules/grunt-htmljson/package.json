{
  "name": "grunt-htmljson",
  "description": "JSON file for all yo templates",
  "version": "0.1.1",
  "homepage": "https://github.com/jonjaques/grunt-htmljson",
  "author": {
    "name": "Jon Jaques",
    "email": "jon@jonjaques.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jonjaques/grunt-htmljson.git"
  },
  "bugs": {
    "url": "https://github.com/jonjaques/grunt-htmljson/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonjaques/grunt-htmljson/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "html",
    "concat",
    "json",
    "gruntplugin"
  ],
  "readme": "# grunt-htmljson\n\n> JSON for yo html templates\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-htmljson --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-htmljson');\n```\n\n## The \"htmljson\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `htmljson` to the data object passed into `grunt.initConfig()`.\n\n### Options\n\n#### options.separator\nType: `String|Number|Null`\nDefault value: `null`\n\nA string value that is used to do something with whatever.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used to do something with whatever. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result would be `Testing, 1 2 3.`\n\n```js\ngrunt.initConfig({\n  htmljson: {\n    src: ['src/templates/**/*.html'],\n    dest: 'dist/templates/combined.json'\n  }\n})\n```\n\n#### Custom Options\nIn this example, custom options are used to do something else with whatever else. So if the `testing` file has the content `Testing` and the `123` file had the content `1 2 3`, the generated result in this case would be `Testing: 1 2 3 !!!`\n\n```js\ngrunt.initConfig({\n  htmljson: {\n    src: ['src/templates/**/*.html'],\n    dest: 'dist/templates/combined.json',\n    options: {\n      separator: 2\n    }\n  },\n})\n```\n\n## Todo\n- Write some tests\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n```\n0.1.0 -- Initial release\n```\n",
  "readmeFilename": "README.md",
  "_id": "grunt-htmljson@0.1.1",
  "dist": {
    "shasum": "5e17e1daa52b91657c70addb25eca73f64ffe28e",
    "tarball": "http://registry.npmjs.org/grunt-htmljson/-/grunt-htmljson-0.1.1.tgz"
  },
  "_from": "grunt-htmljson@>=0.1.1 <0.2.0",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "jonjaques",
    "email": "jon@jonjaques.com"
  },
  "maintainers": [
    {
      "name": "jonjaques",
      "email": "jon@jonjaques.com"
    }
  ],
  "directories": {},
  "_shasum": "5e17e1daa52b91657c70addb25eca73f64ffe28e",
  "_resolved": "https://registry.npmjs.org/grunt-htmljson/-/grunt-htmljson-0.1.1.tgz"
}
